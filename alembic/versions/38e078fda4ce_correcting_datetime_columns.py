# """correcting datetime columns

# Revision ID: 38e078fda4ce
# Revises: ef967a27d7a3
# Create Date: 2025-01-29 22:25:20.519023

# """
# from typing import Sequence, Union

# from alembic import op
# import sqlalchemy as sa
# from sqlalchemy.dialects import postgresql

# # revision identifiers, used by Alembic.
# revision: str = '38e078fda4ce'
# down_revision: Union[str, None] = 'ef967a27d7a3'
# branch_labels: Union[str, Sequence[str], None] = None
# depends_on: Union[str, Sequence[str], None] = None


# def upgrade() -> None:
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.alter_column('cart_items', 'created_at',
#                existing_type=postgresql.TIME(),
#                type_=sa.DateTime(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('cart_items', 'updated_at',
#                existing_type=postgresql.TIME(),
#                type_=sa.DateTime(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('deleted_products', 'created_at',
#                existing_type=postgresql.TIME(),
#                type_=sa.DateTime(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('deleted_products', 'updated_at',
#                existing_type=postgresql.TIME(),
#                type_=sa.DateTime(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('products', 'created_at',
#                existing_type=postgresql.TIME(),
#                type_=sa.DateTime(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('products', 'updated_at',
#                existing_type=postgresql.TIME(),
#                type_=sa.DateTime(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     # ### end Alembic commands ###


# def downgrade() -> None:
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.alter_column('products', 'updated_at',
#                existing_type=sa.DateTime(),
#                type_=postgresql.TIME(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('products', 'created_at',
#                existing_type=sa.DateTime(),
#                type_=postgresql.TIME(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('deleted_products', 'updated_at',
#                existing_type=sa.DateTime(),
#                type_=postgresql.TIME(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('deleted_products', 'created_at',
#                existing_type=sa.DateTime(),
#                type_=postgresql.TIME(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('cart_items', 'updated_at',
#                existing_type=sa.DateTime(),
#                type_=postgresql.TIME(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     op.alter_column('cart_items', 'created_at',
#                existing_type=sa.DateTime(),
#                type_=postgresql.TIME(),
#                existing_nullable=False,
#                existing_server_default=sa.text('now()'))
#     # ### end Alembic commands ###
from alembic import op
import sqlalchemy as sa

# revision identifiers
revision = '38e078fda4ce'
down_revision = 'ef967a27d7a3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.alter_column('cart_items', 'created_at',
                     type_=sa.DateTime(),
                     existing_type=sa.Time(),
                     nullable=False,
                     postgresql_using="to_timestamp(EXTRACT(EPOCH FROM created_at) + 0)")
                     
    op.alter_column('cart_items', 'updated_at',
                     type_=sa.DateTime(),
                     existing_type=sa.Time(),
                     nullable=False,
                     postgresql_using="to_timestamp(EXTRACT(EPOCH FROM updated_at) + 0)")

    op.alter_column('deleted_products', 'created_at',
                     type_=sa.DateTime(),
                     existing_type=sa.Time(),
                     nullable=False,
                     postgresql_using="to_timestamp(EXTRACT(EPOCH FROM created_at) + 0)")

    op.alter_column('deleted_products', 'updated_at',
                     type_=sa.DateTime(),
                     existing_type=sa.Time(),
                     nullable=False,
                     postgresql_using="to_timestamp(EXTRACT(EPOCH FROM updated_at) + 0)")

    op.alter_column('products', 'created_at',
                     type_=sa.DateTime(),
                     existing_type=sa.Time(),
                     nullable=False,
                     postgresql_using="to_timestamp(EXTRACT(EPOCH FROM created_at) + 0)")

    op.alter_column('products', 'updated_at',
                     type_=sa.DateTime(),
                     existing_type=sa.Time(),
                     nullable=False,
                     postgresql_using="to_timestamp(EXTRACT(EPOCH FROM updated_at) + 0)")


def downgrade() -> None:
    # Add downgrade logic if needed
    pass
